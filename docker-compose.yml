# ====== Shared Configuration ======
x-auth-service: &auth-service
  build: .
  restart: unless-stopped
  env_file:
    - .env
  networks:
    - pg-growth-network
  depends_on:
    pg-growth-auth-db:
      condition: service_healthy

services:
  # ====== API Service ======
  pg-growth-auth-api:
    <<: *auth-service
    container_name: pg-growth-auth-api
    environment:
      - MODE=${MODE:-DEV}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - LOG_LEVEL=${LOG_LEVEL:-10}
      - DEBUG=${DEBUG:-true}
      - CRON_JOBS_ENABLE=${CRON_JOBS_ENABLE:-false}
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/health/service_health" ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ====== Database Service ======
  pg-growth-auth-db:
    image: postgres:17-alpine
    container_name: pg-growth-auth-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg-growth-auth-pgdata:/var/lib/postgresql/data
    networks:
      - pg-growth-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

# ====== Infrastructure ======
volumes:
  pg-growth-auth-pgdata:

networks:
  pg-growth-network:
    driver: bridge